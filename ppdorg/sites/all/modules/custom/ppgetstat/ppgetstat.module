<?php

/**
 * @file
 * Drupal.org statistics routines.
 */

/**
 * Implements hook_menu().
 */
function ppgetstat_menu() {
  $items['admin/config/services/ppgetstat'] = array(
    'title' => 'Get user profiles',
    'description' => 'PPgetstat settings.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ppgetstat_settings_form'),
    'access arguments' => array('administer site configuration'),
    'weight' => -21,
    'type' => MENU_NORMAL_ITEM,
  );
  $items['admin/content/ppgetstat_import'] = array(
    'title' => 'Stats Import',
    'description' => 'Manual import drupal.org users data.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ppgetstat_import_form'),
    'access arguments' => array('administer nodes'),
    'weight' => -21,
    'type' => MENU_NORMAL_ITEM,
  );

  return $items;
}

/**
 * ppgetstat settings form.
 *
 * @param array $form
 *   Drupal form.
 *
 * @param array $form_state
 *   Drupal fomr state.
 *
 * @return mixed
 *   Settings form for ppgetstat module.
 */
function ppgetstat_settings_form($form, &$form_state) {
  $form['ppgetstat_users'] = array(
    '#type' => 'textarea',
    '#title' => t('Users list'),
    '#description' => 'Please enter comma separated list of nicks per user line. If user has more than one nick. New line - new user.',
    '#default_value' => variable_get('ppgetstat_users'),
  );
  $form['ppgetstat_pages_to_scan'] = array(
    '#type' => 'textfield',
    '#title' => t('Pages to scan at once at drupal.org'),
    '#description' => 'Please enter integer value here.',
    '#default_value' => variable_get('ppgetstat_pages_to_scan'),
  );

  return system_settings_form($form);
}

/**
 * ppgetstat content import form.
 *
 * @param array $form
 *   Drupal form.
 *
 * @param array $form_state
 *   Drupal form state.
 *
 * @return mixed
 *   Form for ppgetstat manual import.
 */
function ppgetstat_import_form($form, &$form_state) {
  $form['ppgetstat_types'] = array(
    '#type' => 'checkboxes',
    '#options' => drupal_map_assoc(array('commits', 'posts(placeholder)')),
    '#title' => t('drupal.org user\'s data'),
  );
  $form['ppgetstat_import'] = array(
    '#type' => 'submit',
    '#value' => t('Import drupal.org data'),
  );

  return $form;
}

/**
 * ppgetstat content import form submit handler.
 *
 * @param array $form
 *   Drupal form.
 *
 * @param array $form_state
 *   Drupal form state.
 */
function ppgetstat_import_form_submit($form, &$form_state) {
  // Reset counter for debug information.
  drupal_set_message('<pre>' . print_r($form_state['values'], TRUE) . '</pre>');

  // Grab commits in a batch.
  if ($form_state['values']['ppgetstat_types']['commits'] == 'commits') {
    $_SESSION['http_request_count'] = 0;
    $function = 'ppgetstat_commits_batch_start';
    $batch = $function();
    batch_set($batch);
  }

  // @todo create batches for all other types.

}

/**
 * Prepare batch operations.
 *
 * @return array
 *   Array for commits batch routine.
 */
function ppgetstat_commits_batch_start() {

  //drupal_set_message('ret: <pre>' . print_r($ret, TRUE));

  $num_operations = variable_get('ppgetstat_pages_to_scan');
  drupal_set_message(t('Creating an array of @num operations', array('@num' => $num_operations)));


  $operations = array();
  // Set up an operations array with some elements, each doing its own function
  // Each operation in the operations array means at least one new HTTP request,
  // running Drupal from scratch to accomplish the operation. If the operation
  // returns with $context['finished'] != TRUE, then it will be called again.
  // In this example, $context['finished'] is always TRUE.
  for ($i = 0; $i < $num_operations; $i++) {
    //drupal_set_message('iteration: <pre>' . print_r($i, TRUE) . '</pre>');
    // Each operation is an array consisting of
    // - The function to call.
    // - An array of arguments to that function.

    $operations[] = array(
      'ppgetstat_batch_op_1',
      array(
        ppgetstat_dorg_commits_request($i),
        t('(Operation @operation)', array('@operation' => $i)),
      ),
    );
  }
  $batch = array(
    'operations' => $operations,
    'finished' => 'ppgetstat_finished',
  );

  return $batch;
}

/**
 * Batch operation for batch 1: load a node.
 *
 * This is the function that is called on each operation in ppgetstat_commits_batch_start.
 */
function ppgetstat_batch_op_1($ret, $operation_details, &$context) {

  global $user;

  if (isset($ret->data) && count($ret->data) > 0) {
    foreach ($ret->data as $node_arr) {
      if ($node_arr->type == 'status') {
        $node = new stdClass();
        $appid_nid = explode('_', $node_arr->id);
        $node->title = isset($node_arr->message) ? truncate_utf8($node_arr->message, 64, TRUE, TRUE) : $appid_nid[1];
        $ret = psybook_check_node_by_title($node->title);
        if (!isset($ret[0]) | $ret[0] == 0) {
          $node->type = 'message';
          //$node->nid = $node->title;
          node_object_prepare($node);
          $node->language = LANGUAGE_NONE;
          $node->uid = $user->uid;
          $node->created = $node_arr->created_time;
          $node->changed = $node_arr->updated_time;
          $node->timestamp = $node_arr->created_time;
          $node->status = 1;
          $node->is_new = TRUE;
          $node->revision = FALSE;
          $node->validated = TRUE;
          $node->log = '';
          $node->body['und'][0]['value'] = $node_arr->message;
          if (isset($node_arr->message)) {
            $node = node_submit($node);
            psybook_node_save($node);
          }
        }


        // Store some results for post-processing in the 'finished' callback.
        // The contents of 'results' will be available as $results in the
        // 'finished' function (in this example, batch_example_finished()).
        $context['results'][] = $appid_nid[1] . ' : ' . check_plain($node->title);

        // Optional message displayed under the progressbar.
        $context['message'] = t('Saving node "@title"', array('@title' => $node->title)) . ' ' . $operation_details;

      }
    }
  }

  ppgetstat_update_http_requests();
}

/**
 * Utility function to increment HTTP requests in a session variable.
 */
function ppgetstat_update_http_requests() {
  $_SESSION['http_request_count']++;
}

/**
 * Utility function to count the HTTP requests in a session variable.
 *
 * @return int
 *   Number of requests.
 */
function ppgetstat_get_http_requests() {
  return !empty($_SESSION['http_request_count']) ? $_SESSION['http_request_count'] : 0;
}

/**
 * Batch 'finished' callback used by both batch 1 and batch 2.
 */
function ppgetstat_finished($success, $results, $operations) {
  if ($success) {
    // Here we could do something meaningful with the results.
    // We just display the number of nodes we processed...
    drupal_set_message(
      t(
        '@count results processed in @requests HTTP requests.',
        array(
          '@count' => count($results),
          '@requests' => ppgetstat_get_http_requests()
        )
      )
    );
    drupal_set_message(t('The final result was "%final"', array('%final' => end($results))));
  }
  else {
    // An error occurred.
    // $operations contains the operations that remained unprocessed.
    $error_operation = reset($operations);
    drupal_set_message(
      t(
        'An error occurred while processing @operation with arguments : @args',
        array(
          '@operation' => $error_operation[0],
          '@args' => print_r($error_operation[0], TRUE),
        )
      )
    );
  }
}

//
function ppgetstat_dorg_commits_request($i) {
  $usersData = variable_get('ppgetstat_users');

  $qp = htmlqp('https://drupal.org/user/');

}

function ppgetstat_get_user_ids() {
  $users = ppgetstat_get_users();

}

function ppgetstat_get_users() {
  $users = variable_get('ppgetstat_users');
  $user = array();
  foreach (preg_split("/((\r?\n)|(\r\n?))/", $users) as $userLine) {
    $nicks = explode(',', $userLine);
    if (isset($nicks[0])) {
      $user[$nicks[0]] = $nicks;
    }
  }
  return $user;
}